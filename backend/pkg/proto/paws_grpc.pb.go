// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EngineHandlerClient is the client API for EngineHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EngineHandlerClient interface {
	Init(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Notify(ctx context.Context, in *Empty, opts ...grpc.CallOption) (EngineHandler_NotifyClient, error)
	Listen(ctx context.Context, in *Empty, opts ...grpc.CallOption) (EngineHandler_ListenClient, error)
}

type engineHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewEngineHandlerClient(cc grpc.ClientConnInterface) EngineHandlerClient {
	return &engineHandlerClient{cc}
}

func (c *engineHandlerClient) Init(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.EngineHandler/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineHandlerClient) Notify(ctx context.Context, in *Empty, opts ...grpc.CallOption) (EngineHandler_NotifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &EngineHandler_ServiceDesc.Streams[0], "/proto.EngineHandler/Notify", opts...)
	if err != nil {
		return nil, err
	}
	x := &engineHandlerNotifyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EngineHandler_NotifyClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type engineHandlerNotifyClient struct {
	grpc.ClientStream
}

func (x *engineHandlerNotifyClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *engineHandlerClient) Listen(ctx context.Context, in *Empty, opts ...grpc.CallOption) (EngineHandler_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &EngineHandler_ServiceDesc.Streams[1], "/proto.EngineHandler/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &engineHandlerListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EngineHandler_ListenClient interface {
	Recv() (*EngineStatus, error)
	grpc.ClientStream
}

type engineHandlerListenClient struct {
	grpc.ClientStream
}

func (x *engineHandlerListenClient) Recv() (*EngineStatus, error) {
	m := new(EngineStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EngineHandlerServer is the server API for EngineHandler service.
// All implementations must embed UnimplementedEngineHandlerServer
// for forward compatibility
type EngineHandlerServer interface {
	Init(context.Context, *Empty) (*Empty, error)
	Notify(*Empty, EngineHandler_NotifyServer) error
	Listen(*Empty, EngineHandler_ListenServer) error
	mustEmbedUnimplementedEngineHandlerServer()
}

// UnimplementedEngineHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedEngineHandlerServer struct {
}

func (UnimplementedEngineHandlerServer) Init(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedEngineHandlerServer) Notify(*Empty, EngineHandler_NotifyServer) error {
	return status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedEngineHandlerServer) Listen(*Empty, EngineHandler_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedEngineHandlerServer) mustEmbedUnimplementedEngineHandlerServer() {}

// UnsafeEngineHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EngineHandlerServer will
// result in compilation errors.
type UnsafeEngineHandlerServer interface {
	mustEmbedUnimplementedEngineHandlerServer()
}

func RegisterEngineHandlerServer(s grpc.ServiceRegistrar, srv EngineHandlerServer) {
	s.RegisterService(&EngineHandler_ServiceDesc, srv)
}

func _EngineHandler_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineHandlerServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EngineHandler/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineHandlerServer).Init(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineHandler_Notify_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EngineHandlerServer).Notify(m, &engineHandlerNotifyServer{stream})
}

type EngineHandler_NotifyServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type engineHandlerNotifyServer struct {
	grpc.ServerStream
}

func (x *engineHandlerNotifyServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

func _EngineHandler_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EngineHandlerServer).Listen(m, &engineHandlerListenServer{stream})
}

type EngineHandler_ListenServer interface {
	Send(*EngineStatus) error
	grpc.ServerStream
}

type engineHandlerListenServer struct {
	grpc.ServerStream
}

func (x *engineHandlerListenServer) Send(m *EngineStatus) error {
	return x.ServerStream.SendMsg(m)
}

// EngineHandler_ServiceDesc is the grpc.ServiceDesc for EngineHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EngineHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EngineHandler",
	HandlerType: (*EngineHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _EngineHandler_Init_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Notify",
			Handler:       _EngineHandler_Notify_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _EngineHandler_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "paws.proto",
}

// VaultHandlerClient is the client API for VaultHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VaultHandlerClient interface {
	Init(ctx context.Context, in *KeystoreOptions, opts ...grpc.CallOption) (*KeystoreResponse, error)
	CreateWallet(ctx context.Context, in *KeystoreOptions, opts ...grpc.CallOption) (*KeystoreResponse, error)
	ImportWallet(ctx context.Context, in *KeystoreOptions, opts ...grpc.CallOption) (*KeystoreResponse, error)
	CreateHDWallet(ctx context.Context, in *KeystoreOptions, opts ...grpc.CallOption) (*KeystoreResponse, error)
	DeleteWallet(ctx context.Context, in *KeystoreOptions, opts ...grpc.CallOption) (*KeystoreResponse, error)
	GenerateMnemonic(ctx context.Context, in *KeystoreOptions, opts ...grpc.CallOption) (*MnemonicResponse, error)
	GetWallets(ctx context.Context, in *KeystoreOptions, opts ...grpc.CallOption) (*KeystoreResponse, error)
	ListenWallets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (VaultHandler_ListenWalletsClient, error)
}

type vaultHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewVaultHandlerClient(cc grpc.ClientConnInterface) VaultHandlerClient {
	return &vaultHandlerClient{cc}
}

func (c *vaultHandlerClient) Init(ctx context.Context, in *KeystoreOptions, opts ...grpc.CallOption) (*KeystoreResponse, error) {
	out := new(KeystoreResponse)
	err := c.cc.Invoke(ctx, "/proto.VaultHandler/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultHandlerClient) CreateWallet(ctx context.Context, in *KeystoreOptions, opts ...grpc.CallOption) (*KeystoreResponse, error) {
	out := new(KeystoreResponse)
	err := c.cc.Invoke(ctx, "/proto.VaultHandler/CreateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultHandlerClient) ImportWallet(ctx context.Context, in *KeystoreOptions, opts ...grpc.CallOption) (*KeystoreResponse, error) {
	out := new(KeystoreResponse)
	err := c.cc.Invoke(ctx, "/proto.VaultHandler/ImportWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultHandlerClient) CreateHDWallet(ctx context.Context, in *KeystoreOptions, opts ...grpc.CallOption) (*KeystoreResponse, error) {
	out := new(KeystoreResponse)
	err := c.cc.Invoke(ctx, "/proto.VaultHandler/CreateHDWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultHandlerClient) DeleteWallet(ctx context.Context, in *KeystoreOptions, opts ...grpc.CallOption) (*KeystoreResponse, error) {
	out := new(KeystoreResponse)
	err := c.cc.Invoke(ctx, "/proto.VaultHandler/DeleteWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultHandlerClient) GenerateMnemonic(ctx context.Context, in *KeystoreOptions, opts ...grpc.CallOption) (*MnemonicResponse, error) {
	out := new(MnemonicResponse)
	err := c.cc.Invoke(ctx, "/proto.VaultHandler/GenerateMnemonic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultHandlerClient) GetWallets(ctx context.Context, in *KeystoreOptions, opts ...grpc.CallOption) (*KeystoreResponse, error) {
	out := new(KeystoreResponse)
	err := c.cc.Invoke(ctx, "/proto.VaultHandler/GetWallets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultHandlerClient) ListenWallets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (VaultHandler_ListenWalletsClient, error) {
	stream, err := c.cc.NewStream(ctx, &VaultHandler_ServiceDesc.Streams[0], "/proto.VaultHandler/ListenWallets", opts...)
	if err != nil {
		return nil, err
	}
	x := &vaultHandlerListenWalletsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VaultHandler_ListenWalletsClient interface {
	Recv() (*KeystoreResponse, error)
	grpc.ClientStream
}

type vaultHandlerListenWalletsClient struct {
	grpc.ClientStream
}

func (x *vaultHandlerListenWalletsClient) Recv() (*KeystoreResponse, error) {
	m := new(KeystoreResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VaultHandlerServer is the server API for VaultHandler service.
// All implementations must embed UnimplementedVaultHandlerServer
// for forward compatibility
type VaultHandlerServer interface {
	Init(context.Context, *KeystoreOptions) (*KeystoreResponse, error)
	CreateWallet(context.Context, *KeystoreOptions) (*KeystoreResponse, error)
	ImportWallet(context.Context, *KeystoreOptions) (*KeystoreResponse, error)
	CreateHDWallet(context.Context, *KeystoreOptions) (*KeystoreResponse, error)
	DeleteWallet(context.Context, *KeystoreOptions) (*KeystoreResponse, error)
	GenerateMnemonic(context.Context, *KeystoreOptions) (*MnemonicResponse, error)
	GetWallets(context.Context, *KeystoreOptions) (*KeystoreResponse, error)
	ListenWallets(*Empty, VaultHandler_ListenWalletsServer) error
	mustEmbedUnimplementedVaultHandlerServer()
}

// UnimplementedVaultHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedVaultHandlerServer struct {
}

func (UnimplementedVaultHandlerServer) Init(context.Context, *KeystoreOptions) (*KeystoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedVaultHandlerServer) CreateWallet(context.Context, *KeystoreOptions) (*KeystoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedVaultHandlerServer) ImportWallet(context.Context, *KeystoreOptions) (*KeystoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportWallet not implemented")
}
func (UnimplementedVaultHandlerServer) CreateHDWallet(context.Context, *KeystoreOptions) (*KeystoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHDWallet not implemented")
}
func (UnimplementedVaultHandlerServer) DeleteWallet(context.Context, *KeystoreOptions) (*KeystoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWallet not implemented")
}
func (UnimplementedVaultHandlerServer) GenerateMnemonic(context.Context, *KeystoreOptions) (*MnemonicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateMnemonic not implemented")
}
func (UnimplementedVaultHandlerServer) GetWallets(context.Context, *KeystoreOptions) (*KeystoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWallets not implemented")
}
func (UnimplementedVaultHandlerServer) ListenWallets(*Empty, VaultHandler_ListenWalletsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenWallets not implemented")
}
func (UnimplementedVaultHandlerServer) mustEmbedUnimplementedVaultHandlerServer() {}

// UnsafeVaultHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VaultHandlerServer will
// result in compilation errors.
type UnsafeVaultHandlerServer interface {
	mustEmbedUnimplementedVaultHandlerServer()
}

func RegisterVaultHandlerServer(s grpc.ServiceRegistrar, srv VaultHandlerServer) {
	s.RegisterService(&VaultHandler_ServiceDesc, srv)
}

func _VaultHandler_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeystoreOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultHandlerServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VaultHandler/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultHandlerServer).Init(ctx, req.(*KeystoreOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultHandler_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeystoreOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultHandlerServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VaultHandler/CreateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultHandlerServer).CreateWallet(ctx, req.(*KeystoreOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultHandler_ImportWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeystoreOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultHandlerServer).ImportWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VaultHandler/ImportWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultHandlerServer).ImportWallet(ctx, req.(*KeystoreOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultHandler_CreateHDWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeystoreOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultHandlerServer).CreateHDWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VaultHandler/CreateHDWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultHandlerServer).CreateHDWallet(ctx, req.(*KeystoreOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultHandler_DeleteWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeystoreOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultHandlerServer).DeleteWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VaultHandler/DeleteWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultHandlerServer).DeleteWallet(ctx, req.(*KeystoreOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultHandler_GenerateMnemonic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeystoreOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultHandlerServer).GenerateMnemonic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VaultHandler/GenerateMnemonic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultHandlerServer).GenerateMnemonic(ctx, req.(*KeystoreOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultHandler_GetWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeystoreOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultHandlerServer).GetWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VaultHandler/GetWallets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultHandlerServer).GetWallets(ctx, req.(*KeystoreOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultHandler_ListenWallets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VaultHandlerServer).ListenWallets(m, &vaultHandlerListenWalletsServer{stream})
}

type VaultHandler_ListenWalletsServer interface {
	Send(*KeystoreResponse) error
	grpc.ServerStream
}

type vaultHandlerListenWalletsServer struct {
	grpc.ServerStream
}

func (x *vaultHandlerListenWalletsServer) Send(m *KeystoreResponse) error {
	return x.ServerStream.SendMsg(m)
}

// VaultHandler_ServiceDesc is the grpc.ServiceDesc for VaultHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VaultHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.VaultHandler",
	HandlerType: (*VaultHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _VaultHandler_Init_Handler,
		},
		{
			MethodName: "CreateWallet",
			Handler:    _VaultHandler_CreateWallet_Handler,
		},
		{
			MethodName: "ImportWallet",
			Handler:    _VaultHandler_ImportWallet_Handler,
		},
		{
			MethodName: "CreateHDWallet",
			Handler:    _VaultHandler_CreateHDWallet_Handler,
		},
		{
			MethodName: "DeleteWallet",
			Handler:    _VaultHandler_DeleteWallet_Handler,
		},
		{
			MethodName: "GenerateMnemonic",
			Handler:    _VaultHandler_GenerateMnemonic_Handler,
		},
		{
			MethodName: "GetWallets",
			Handler:    _VaultHandler_GetWallets_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenWallets",
			Handler:       _VaultHandler_ListenWallets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "paws.proto",
}
