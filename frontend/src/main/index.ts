import { app, BrowserWindow, ipcMain, session } from 'electron';
const isPackaged = require('electron-is-packaged').isPackaged;
import path from 'path';
import inspector from 'inspector'

import { initEngine } from './handlers/engine'
import { EngineStatus } from './proto/paws'

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
export let mainWindow: BrowserWindow;
export let statuses = {
  engineStatus: {}
};

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) { // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 800,
    width: 1280,
    minHeight: 600,
    minWidth: 700,
    frame: false,
    center: true,
    transparent: true,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      preload: path.join(__dirname, '/preload.js'),
      spellcheck: false,
      //devTools: process.env.MODE !== 'production',
    },
    // show: process.env.MODE === 'production',
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  const processArgs: string = process.argv.join(' ')
  if (
    processArgs.includes('--inspect') ||
    processArgs.includes('--heap-prof') ||
    processArgs.includes('--heapsnapshot-signal') ||
    processArgs.includes('--insecure-http-parser') ||
    processArgs.includes('--openssl-config') ||
    processArgs.includes('--prof') ||
    processArgs.includes('--report') ||
    processArgs.includes('--tls') ||
    processArgs.includes('--trace') ||
    processArgs.includes('--use') ||
    processArgs.includes('-e') ||
    processArgs.includes('-r') ||
    processArgs.includes('--debug') ||
    inspector.url()
  ) {
    return app.exit()
  }

  if (process.env.NODE_DEBUG || process.env.NODE_DEBUG_NATIVE) {
    return app.exit()
  }

  createWindow()

  // Initialize backend
  console.log(process.env.PAWS_ENGINE_PATH)

  mainWindow.webContents.once("dom-ready", () => {
    if (!isPackaged && process.env.PAWS_ENGINE_PATH) {
      console.log("Spawning engine...")
      initEngine(process.env.PAWS_ENGINE_PATH, "", "")
    }
  })


  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': ['']
      }
    })
  })
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
ipcMain.on('quit', () => {
  app.quit()
})
